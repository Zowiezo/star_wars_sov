"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
var api_1 = require("../api");
var figures = require("figures");
var generateName = require("sillyname");
var ora = require("ora");
var chalk = require("chalk");
var node_fetch_1 = require("node-fetch");
var fs = require("fs");
var path = require("path");
var file_1 = require("../utils/file");
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = function (props) { return __awaiter(_this, void 0, void 0, function () {
    var name, aliasPart, spinner, schema, result, projectId, resultSchema, message;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (fs.existsSync('graphcool.schema') && fs.readFileSync('graphcool.schema').toString().includes('# projectId: "')) {
                    throw new Error("graphcool.schema already exists with a projectId. Looks like you've already setup your backend.");
                }
                name = props.name || generateName();
                aliasPart = props.alias ? "alias: \"" + props.alias + "\"" : '';
                spinner = ora("Creating project " + chalk.bold(name) + "...").start();
                return [4 /*yield*/, getSchema(props.schema)];
            case 1:
                schema = _a.sent();
                return [4 /*yield*/, api_1.default().query("mutation addProject($schema: String) {\n    addProject(input: {\n      name: \"" + name + "\"\n      " + aliasPart + "\n      schema: $schema\n      clientMutationId: \"static\"\n    }) {\n      project {\n        id\n        schema\n      }\n    }\n  }", { schema: schema.schema })];
            case 2:
                result = _a.sent();
                projectId = result.addProject.project.id;
                resultSchema = result.addProject.project.schema;
                file_1.writeSchemaFile(resultSchema, projectId);
                spinner.stop();
                message = chalk.green(figures.tick) + "  Created project " + chalk.bold(name) + " from " + chalk.bold(schema.source) + ". Your endpoints are:\n \n  " + chalk.blue(figures.pointer) + " Simple API: https://api.graph.cool/simple/v1/" + projectId + "\n  " + chalk.blue(figures.pointer) + " Relay API: https://api.graph.cool/relay/v1/" + projectId;
                console.log(message);
                return [2 /*return*/];
        }
    });
}); };
function getSchema(schemaProp) {
    return __awaiter(this, void 0, void 0, function () {
        var response, schema, schemaFiles, file;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!schemaProp) return [3 /*break*/, 5];
                    if (!schemaProp.startsWith('http')) return [3 /*break*/, 3];
                    return [4 /*yield*/, node_fetch_1.default(schemaProp)];
                case 1:
                    response = _a.sent();
                    return [4 /*yield*/, response.text()];
                case 2:
                    schema = _a.sent();
                    return [2 /*return*/, {
                            schema: schema,
                            source: schemaProp,
                        }];
                case 3: return [2 /*return*/, {
                        schema: fs.readFileSync(path.resolve(schemaProp)).toString(),
                        source: schemaProp,
                    }];
                case 4: return [3 /*break*/, 6];
                case 5:
                    schemaFiles = fs.readdirSync('.').filter(function (f) { return f.endsWith('.schema'); });
                    if (schemaFiles.length === 0) {
                        throw new Error('No .schema file found or specified');
                    }
                    file = schemaFiles.find(function (f) { return f === 'graphcool.schema'; }) || schemaFiles[0];
                    return [2 /*return*/, {
                            schema: fs.readFileSync(path.resolve(file)).toString(),
                            source: schemaFiles[0],
                        }];
                case 6: return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=create.js.map