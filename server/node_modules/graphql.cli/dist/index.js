#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var minimist = require("minimist");
var create_1 = require("./commands/create");
var fetch_1 = require("./commands/fetch");
var auth_1 = require("./commands/auth");
var projects_1 = require("./commands/projects");
var chalk = require("chalk");
var figures = require("figures");
var usage_1 = require("./usage");
var version = require('../package.json').version;
function main() {
    return __awaiter(this, void 0, void 0, function () {
        var argv, command, _a, token, name, alias, schema, projectId;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    argv = minimist(process.argv.slice(2));
                    command = argv._[0];
                    process.stdout.write('\n');
                    _a = command;
                    switch (_a) {
                        case undefined: return [3 /*break*/, 1];
                        case 'auth': return [3 /*break*/, 2];
                        case 'create': return [3 /*break*/, 4];
                        case 'fetch': return [3 /*break*/, 6];
                        case 'projects': return [3 /*break*/, 8];
                        case 'version': return [3 /*break*/, 10];
                        case 'help': return [3 /*break*/, 11];
                    }
                    return [3 /*break*/, 12];
                case 1:
                    {
                        process.stdout.write(usage_1.usageRoot);
                        process.exit(0);
                    }
                    _b.label = 2;
                case 2:
                    checkHelp(argv, usage_1.usageAuth);
                    token = argv['token'] || argv['t'];
                    return [4 /*yield*/, auth_1.default({
                            token: token,
                        })];
                case 3:
                    _b.sent();
                    return [3 /*break*/, 13];
                case 4:
                    checkHelp(argv, usage_1.usageCreate);
                    name = argv['name'] || argv['n'];
                    alias = argv['alias'] || argv['a'];
                    schema = argv._[1];
                    return [4 /*yield*/, create_1.default({
                            name: name,
                            alias: alias,
                            schema: schema,
                        })];
                case 5:
                    _b.sent();
                    return [3 /*break*/, 13];
                case 6:
                    checkHelp(argv, usage_1.usageFetch);
                    projectId = argv['project-id'] || argv['p'];
                    return [4 /*yield*/, fetch_1.default({
                            projectId: projectId,
                        })];
                case 7:
                    _b.sent();
                    return [3 /*break*/, 13];
                case 8:
                    checkHelp(argv, usage_1.usageProjects);
                    return [4 /*yield*/, projects_1.default({})];
                case 9:
                    _b.sent();
                    return [3 /*break*/, 13];
                case 10:
                    {
                        console.log(version);
                        return [3 /*break*/, 13];
                    }
                    _b.label = 11;
                case 11:
                    {
                        process.stdout.write(usage_1.usageRoot);
                        process.exit(0);
                        return [3 /*break*/, 13];
                    }
                    _b.label = 12;
                case 12:
                    {
                        console.log("Unknown command: " + command);
                        return [3 /*break*/, 13];
                    }
                    _b.label = 13;
                case 13: return [2 /*return*/];
            }
        });
    });
}
function checkHelp(argv, usage) {
    if (argv['help'] || argv['h']) {
        process.stdout.write(usage);
        process.exit(0);
    }
}
function onError(e) {
    console.log(chalk.red(figures.cross) + " Error: " + e.message + "\n");
    console.log(e.stack);
    process.exit(1);
}
process.on('unhandledRejection', function (e) { return onError(e); });
main().catch(function (e) { return onError(e); });
//# sourceMappingURL=index.js.map